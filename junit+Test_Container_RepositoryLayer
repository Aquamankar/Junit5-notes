-------------------------------------------------------------------------------------------------------------------------------------
save()

findById()

findByEmail()

existsByEmail()

findAll()

deleteById()
-------------------------------------------------------------------------------------------------------------------------------
----------------------------------1️⃣ Example Student Entity------------------------------------------------------------------


@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer age;
    private String email;
}

------------------------------------------------------------------------------------------------------------------------------
-----------------------------------2️⃣ Example Repository Interface---------------------------------------------------------



@Repository
public interface StudentRepo extends JpaRepository<Student, Long> {
    Optional<Student> findByEmail(String email);
    boolean existsByEmail(String email);
}
------------------------------------------------------------------------------------------------------------------------------------


2️⃣ Testcontainers + BDD style Repository Test
java
Copy
Edit
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
@Testcontainers
class StudentRepoBDDTest {

    @Container
    static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0.32")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", mysql::getJdbcUrl);
        registry.add("spring.datasource.username", mysql::getUsername);
        registry.add("spring.datasource.password", mysql::getPassword);
    }

    @Autowired
    private StudentRepo studentRepo;

    Student student;

    @BeforeEach
    void setUp() {
        student = new Student(null, "John Doe", 22, "john@example.com");
        studentRepo.deleteAll();
    }

    @Test
    void givenStudent_whenSave_thenStudentIsPersisted() {
        // Given
        Student saved = studentRepo.save(student);

        // When
        Optional<Student> found = studentRepo.findById(saved.getId());

        // Then
        assertThat(found).isPresent();
        assertThat(found.get().getName()).isEqualTo("John Doe");
    }

    @Test
    void givenStudentInDB_whenFindByEmail_thenReturnStudent() {
        // Given
        studentRepo.save(student);

        // When
        Optional<Student> found = studentRepo.findByEmail("john@example.com");

        // Then
        assertThat(found).isPresent();
        assertThat(found.get().getEmail()).isEqualTo("john@example.com");
    }

    @Test
    void givenStudentInDB_whenExistsByEmail_thenReturnTrue() {
        // Given
        studentRepo.save(student);

        // When
        boolean exists = studentRepo.existsByEmail("john@example.com");

        // Then
        assertThat(exists).isTrue();
    }

    @Test
    void givenMultipleStudents_whenFindAll_thenReturnList() {
        // Given
        studentRepo.saveAll(List.of(
                student,
                new Student(null, "Jane Doe", 25, "jane@example.com")
        ));

        // When
        List<Student> students = studentRepo.findAll();

        // Then
        assertThat(students).hasSize(2);
    }

    @Test
    void givenStudentInDB_whenDeleteById_thenRemovedFromDB() {
        // Given
        Student saved = studentRepo.save(student);

        // When
        studentRepo.deleteById(saved.getId());
        Optional<Student> deleted = studentRepo.findById(saved.getId());

        // Then
        assertThat(deleted).isNotPresent();
    }
}
3️⃣ How BDD fits here
Even though JPA repository tests are mostly arrange–act–assert, you can still keep BDD clarity:

Given → insert data / define initial state

When → perform the repository method call

Then → assert the expected results






-----------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------3️⃣ Repository Test with Testcontainers MySQL---------------------------------------------------------


@DataJpaTest
@Testcontainers
class StudentRepoTest {

    @Container
    static MySQLContainer<?> mysqlContainer = new MySQLContainer<>("mysql:8.0.36")
            .withDatabaseName("testdb")
            .withUsername("testuser")
            .withPassword("testpass");

    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", mysqlContainer::getJdbcUrl);
        registry.add("spring.datasource.username", mysqlContainer::getUsername);
        registry.add("spring.datasource.password", mysqlContainer::getPassword);
    }

    @Autowired
    StudentRepo studentRepo;

    Student savedStudent;

    @BeforeEach
    void setup() {
        studentRepo.deleteAll();
        savedStudent = studentRepo.save(new Student(null, "John Doe", 22, "john@example.com"));
    }

    @Test
    void testSaveStudent() {
        Student student = new Student(null, "Jane Doe", 25, "jane@example.com");
        Student saved = studentRepo.save(student);

        assertNotNull(saved.getId());
        assertEquals("Jane Doe", saved.getName());
    }

    @Test
    void testFindById() {
        Optional<Student> found = studentRepo.findById(savedStudent.getId());
        assertTrue(found.isPresent());
        assertEquals("John Doe", found.get().getName());
    }

    @Test
    void testFindByEmail() {
        Optional<Student> found = studentRepo.findByEmail("john@example.com");
        assertTrue(found.isPresent());
        assertEquals(savedStudent.getId(), found.get().getId());
    }

    @Test
    void testExistsByEmail() {
        boolean exists = studentRepo.existsByEmail("john@example.com");
        assertTrue(exists);
    }

    @Test
    void testFindAll() {
        List<Student> students = studentRepo.findAll();
        assertEquals(1, students.size());
    }

    @Test
    void testDeleteById() {
        studentRepo.deleteById(savedStudent.getId());
        Optional<Student> deleted = studentRepo.findById(savedStudent.getId());
        assertFalse(deleted.isPresent());
    }
}
------------------------------------------------------------------------

4️⃣ Notes & Best Practices
@DataJpaTest → loads only JPA-related components, making tests faster.

Testcontainers MySQL → ensures you test against a real MySQL instance, not H2.

Use @BeforeEach to insert test data before each test.

Always clear data in setup() to avoid data leakage between tests.

Write one test per repository method for clarity.


